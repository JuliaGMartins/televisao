{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { auth, db, firebase } from \"./firebase\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\nimport { collection, getDocs, updateDoc, doc, query, where } from 'firebase/firestore';\nawait addDoc(collection(db, 'Users'), {\n  name: firstName + ' ' + lastName,\n  email: email\n}).then(function (response) {\n  console.log(response);\n}).catch(function (error) {\n  console.log(error);\n});\nexport var getApprovedEmails = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var emails = [];\n    var emailsRef = collection(db, \"ApprovedEmails\");\n    var querySnapshot = yield getDocs(emailsRef);\n    querySnapshot.forEach(function (e) {\n      emails.push(e.data().email);\n    });\n    return emails;\n  });\n  return function getApprovedEmails() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getUsers = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    var users = [];\n    var usersRef = collection(db, \"Users\");\n    var querySnapshot = yield getDocs(usersRef);\n    querySnapshot.forEach(function (u) {\n      users.push(u.data());\n    });\n    return users;\n  });\n  return function getUsers() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getRequests = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    var requests = [];\n    var requestsRef = collection(db, \"Request\");\n    var querySnapshot = yield getDocs(requestsRef);\n    querySnapshot.forEach(function (r) {\n      requests.push(r.data());\n    });\n    return requests;\n  });\n  return function getRequests() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getExams = function () {\n  var _ref4 = _asyncToGenerator(function* () {\n    var exams = [];\n    var examsRef = collection(db, \"Exams\");\n    var querySnapshot = yield getDocs(examsRef);\n    querySnapshot.forEach(function (e) {\n      exams.push(e.data());\n    });\n    return exams;\n  });\n  return function getExams() {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getExaminers = function () {\n  var _ref5 = _asyncToGenerator(function* () {\n    var examiners = [];\n    var examinersRef = collection(db, \"Examiners\");\n    var querySnapshot = yield getDocs(examinersRef);\n    querySnapshot.forEach(function (e) {\n      examiners.push(e.data());\n    });\n    return examiners;\n  });\n  return function getExaminers() {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getOphthalmologists = function () {\n  var _ref6 = _asyncToGenerator(function* () {\n    var ophthalmologists = [];\n    var ophthalmologistsRef = collection(db, \"Ophthalmologists\");\n    var querySnapshot = yield getDocs(ophthalmologistsRef);\n    querySnapshot.forEach(function (o) {\n      ophthalmologists.push(o.data());\n    });\n    return ophthalmologists;\n  });\n  return function getOphthalmologists() {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var getPatients = function () {\n  var _ref7 = _asyncToGenerator(function* () {\n    var patients = [];\n    var patientsRef = collection(db, \"Patients\");\n    var querySnapshot = yield getDocs(patientsRef);\n    querySnapshot.forEach(function (p) {\n      patients.push(p.data());\n    });\n    return patients;\n  });\n  return function getPatients() {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var getRequesters = function () {\n  var _ref8 = _asyncToGenerator(function* () {\n    var requesters = [];\n    var requestersRef = collection(db, \"Requesters\");\n    var querySnapshot = yield getDocs(requestersRef);\n    querySnapshot.forEach(function (r) {\n      requesters.push(r.data());\n    });\n    return requesters;\n  });\n  return function getRequesters() {\n    return _ref8.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["auth","db","firebase","signInWithEmailAndPassword","collection","getDocs","updateDoc","doc","query","where","addDoc","name","firstName","lastName","email","then","response","console","log","catch","error","getApprovedEmails","_ref","_asyncToGenerator","emails","emailsRef","querySnapshot","forEach","e","push","data","apply","arguments","getUsers","_ref2","users","usersRef","u","getRequests","_ref3","requests","requestsRef","r","getExams","_ref4","exams","examsRef","getExaminers","_ref5","examiners","examinersRef","getOphthalmologists","_ref6","ophthalmologists","ophthalmologistsRef","o","getPatients","_ref7","patients","patientsRef","p","getRequesters","_ref8","requesters","requestersRef"],"sources":["/home/juliagm/televisao/src/Config/firebaseRequests.js"],"sourcesContent":["import { auth, db, firebase } from \"./firebase\";\nimport { signInWithEmailAndPassword\n} from \"firebase/auth\";\nimport { collection, getDocs, updateDoc, doc,  query, where} from 'firebase/firestore';\n\n// add user to database\nawait addDoc(collection(db, 'Users'), {\n  name: firstName + ' ' + lastName,\n  email: email,\n}).then((response) => {\n  console.log(response);\n}).catch((error) => { console.log(error) });\n\n// get ApprovedEmails emails from database\nexport const getApprovedEmails = async () => {\n  let emails = [];\n  let emailsRef = collection(db, \"ApprovedEmails\");\n  let querySnapshot = await getDocs(emailsRef);\n  querySnapshot.forEach(e => {\n    emails.push(e.data().email);\n  });\n  return emails;\n}\n\n// get users from database\nexport const getUsers = async () => { \n  let users = [];\n  let usersRef = collection(db, \"Users\");\n  let querySnapshot = await getDocs(usersRef);\n  querySnapshot.forEach(u => {\n    users.push(u.data());\n  });\n  return users;\n}\n\n// get requests from database\nexport const getRequests = async () => {\n  let requests = [];\n  let requestsRef = collection(db, \"Request\");\n  let querySnapshot = await getDocs(requestsRef);\n  querySnapshot.forEach(r => {\n    requests.push(r.data());\n  });\n  return requests;\n}\n\n// get exams from database\nexport const getExams = async () => {\n  let exams = [];\n  let examsRef = collection(db, \"Exams\");\n  let querySnapshot = await getDocs(examsRef);\n  querySnapshot.forEach(e => {\n    exams.push(e.data());\n  });\n  return exams;\n}\n\n// get Examiners from database\nexport const getExaminers = async () => {\n  let examiners = [];\n  let examinersRef = collection(db, \"Examiners\");\n  let querySnapshot = await getDocs(examinersRef);\n  querySnapshot.forEach(e => {\n    examiners.push(e.data());\n  });\n  return examiners;\n}\n\n//get Ophthalmologists from database\nexport const getOphthalmologists = async () => {\n  let ophthalmologists = [];\n  let ophthalmologistsRef = collection(db, \"Ophthalmologists\");\n  let querySnapshot = await getDocs(ophthalmologistsRef);\n  querySnapshot.forEach(o => {\n    ophthalmologists.push(o.data());\n  });\n  return ophthalmologists;\n}\n\n// get Patients from database\nexport const getPatients = async () => {\n  let patients = [];\n  let patientsRef = collection(db, \"Patients\");\n  let querySnapshot = await getDocs(patientsRef);\n  querySnapshot.forEach(p => {\n    patients.push(p.data());\n  });\n  return patients;\n}\n\n// get Requesters from database\nexport const getRequesters = async () => {\n  let requesters = [];\n  let requestersRef = collection(db, \"Requesters\");\n  let querySnapshot = await getDocs(requestersRef);\n  querySnapshot.forEach(r => {\n    requesters.push(r.data());\n  });\n  return requesters;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}